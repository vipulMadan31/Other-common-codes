#include <vector>
#include <stack>
using namespace std;

class Solution {
public:
    vector<int> NGR(const vector<int>& arr) {
        vector<int> ngr(arr.size(), arr.size());
        stack<int> s;
        
        for (int i = arr.size() - 1; i >= 0; --i) {
            while (!s.empty() && arr[s.top()] <= arr[i]) {
                s.pop();
            }
            if (!s.empty()) {
                ngr[i] = s.top();
            }
            s.push(i);
        }
        return ngr;
    }

    vector<int> NSR(const vector<int>& arr) {
        vector<int> nsr(arr.size(), arr.size());
        stack<int> s;
        
        for (int i = arr.size() - 1; i >= 0; --i) {
            while (!s.empty() && arr[s.top()] >= arr[i]) {
                s.pop();
            }
            if (!s.empty()) {
                nsr[i] = s.top();
            }
            s.push(i);
        }
        return nsr;
    }

    vector<int> NGL(const vector<int>& arr) {
        vector<int> ngl(arr.size(), -1);
        stack<int> s;
        
        for (int i = 0; i < arr.size(); ++i) {
            while (!s.empty() && arr[s.top()] <= arr[i]) {
                s.pop();
            }
            if (!s.empty()) {
                ngl[i] = s.top();
            }
            s.push(i);
        }
        return ngl;
    }

    vector<int> NSL(const vector<int>& arr) {
        vector<int> nsl(arr.size(), -1);
        stack<int> s;
        
        for (int i = 0; i < arr.size(); ++i) {
            while (!s.empty() && arr[s.top()] >= arr[i]) {
                s.pop();
            }
            if (!s.empty()) {
                nsl[i] = s.top();
            }
            s.push(i);
        }
        return nsl;
    }
};

