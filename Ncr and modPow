const int MOD = 1e9 + 7;

vector<long long> fact, inv_fact;

long long mod_pow(long long base, long long exp, int mod) {
    long long result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = result * base % mod;
        }
        base = base * base % mod;
        exp /= 2;
    }
    return result;
}

void precompute_factorials_and_inverses(int max_n, int mod = MOD) {
    fact.resize(max_n + 1);
    inv_fact.resize(max_n + 1);
    
    fact[0] = 1;
    for (int i = 1; i <= max_n; ++i) {
        fact[i] = fact[i - 1] * i % mod;
    }
    
    inv_fact[max_n] = mod_pow(fact[max_n], mod - 2, mod); // Fermat's Little Theorem
    
    for (int i = max_n - 1; i >= 0; --i) {
        inv_fact[i] = inv_fact[i + 1] * (i + 1) % mod;
    }
}

long long nCr(int n, int r, int mod = MOD) {
    if (r > n || r < 0) return 0;
    return fact[n] * inv_fact[r] % mod * inv_fact[n - r] % mod;
}
