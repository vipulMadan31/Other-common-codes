vec arr; vec seg; vec lazy; 
int merge(int a, int b){
    return a+b;
}
void build(int i=0, int low=0, int high=arr.size()-1){
    if(low==high) {seg[i]=arr[low]; return;}//simple div and conquer
    int mid=(low+high)/2;
    build(2*i+1,low,mid);
    build(2*i+2,mid+1,high);//phle hi bn chuke
    seg[i]=merge(seg[2*i+1],seg[2*i+2]);
}
void update(int pos, int val,int low=0, int high=arr.size()-1, int i=0){
    if(low==high){
        arr[pos]=val;
        seg[i]=val;
        return;
    }
    int mid=(low+high)/2;
    if(pos<=mid){
        update(pos,val,low,mid,2*i+1);//update left
    }
    else update(pos,val,mid+1,high,2*i+2);
    seg[i]=merge(seg[2*i+1],seg[2*i+2]);
}
int query(int l, int r,int i=0,int low=0, int high=arr.size()-1){
    //l and r can are range
    if(l<=low && high<=r){
        return seg[i];//agar pura andar aa gya toh sab dedo
    }
    if(high<l || low>r){
        //no overlap
        return 0;
    }
    //partial overlap, neeche jaake dekho
    int mid=(low+high)/2;
    int left=query(l,r,2*i+1,low,mid);
    int right=query(l,r,2*i+2,mid+1,high);
    return merge(left,right);
}
void checkLazy(int i, int low, int high){
    if(lazy[i]!=0){
        seg[i]+=(high-low+1)*(lazy[i]);
        if(low!=high){//if not a leaf node
            lazy[2*i+1]+=lazy[i];
            lazy[2*i+2]+=lazy[i];
        }//postpone the updates for children
    }
    lazy[i]=0;//make it 0
}
void lazyUpdate(int l, int r, int val, int i=0, int low=0, int high=arr.size()-1){
    checkLazy(i,low,high);
    if(r<low || l>high) return;
    if(l<=low && high<=r){//complete, ie we need to update like lazy only 
        seg[i]+=(high-low+1)*val;
        if(low!=high){
            lazy[2*i+1]+=val;
            lazy[2*i+2]+=val;
        }
        return;
    }
    int mid=(low+high)/2;
    lazyUpdate(l,r,val,2*i+1,low,mid);
    lazyUpdate(l,r,val,2*i+2,mid+1,high);
    seg[i]=seg[2*i+1]+seg[2*i+2];
}
int lazyQuery(int l, int r,int i=0,int low=0, int high=arr.size()-1){
    checkLazy(i,low,high);//phle hi check krlo yaha koi update phle ki padi h kya 
    //hai toh krdo
    //now we neeed just the normal sum, like normal case 
    if(r<low || l>high) return 0;
    if(l<=low && high<=r) return seg[i];//partial overlap
    
    //else divide and conquer 
    int mid=(low+high)/2;
    int left=lazyQuery(l,r,2*i+1,low,mid);
    int right=lazyQuery(l,r,2*i+2,mid+1,high);
    return left+right;
}
