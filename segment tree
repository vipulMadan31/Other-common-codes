vec arr; vec seg;
int merge(int a, int b){
    return a^b;
}
void build(int i=0, int low=0, int high=arr.size()-1){
    if(low==high) {seg[i]=arr[low]; return;}//simple div and conquer
    int mid=(low+high)/2;
    build(2*i+1,low,mid);
    build(2*i+2,mid+1,high);//phle hi bn chuke
    seg[i]=merge(seg[2*i+1],seg[2*i+2]);
}
void update(int pos, int val,int low=0, int high=arr.size()-1, int i=0){
    if(low==high){
        arr[pos]=val;
        seg[i]=val;
        return;
    }
    int mid=(low+high)/2;
    if(pos<=mid){
        update(pos,val,low,mid,2*i+1);//update left
    }
    else update(pos,val,mid+1,high,2*i+2);
    seg[i]=merge(seg[2*i+1],seg[2*i+2]);
}
int query(int l, int r,int i=0,int low=0, int high=arr.size()-1){
    //l and r can are range
    if(l<=low && high<=r){
        return seg[i];//agar pura andar aa gya toh sab dedo
    }
    if(high<l || low>r){
        //no overlap
        return 0;
    }
    //partial overlap, neeche jaake dekho
    int mid=(low+high)/2;
    int left=query(l,r,2*i+1,low,mid);
    int right=query(l,r,2*i+2,mid+1,high);
    return merge(left,right);
}
signed main(){
    fastio();
    int n; cin>>n;
    arr.resize(n); seg.resize(4*n,0);
    ffor(n) cin>>arr[i];
    build();
    int q; cin>>q;
    while(q--){
        int a; cin>>a;
        if(a==1){
            int b,c; cin>>b>>c;
            update(b,c);
        }
        else{
            int l,r; cin>>l>>r;
            cout<<query(l,r)<<endl;
        }
    }
}
