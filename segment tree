struct node{
    int sum;//node would store sum,(state)
    node(){
        sum=0;
    }
};
node merge(node a, node b){
    node ans;
    ans.sum=a.sum+b.sum;
    return ans;//transition
}
vec arr; vector<node> seg;
void build(int i=0, int low=0, int high=arr.size()-1){
    if(low==high){
        //base case 
        seg[i].sum=arr[low];
        return;//leaf node is arr[low] only not arr[i]
    }
    int mid=(low+high)/2;
    build(2*i+1,low,mid);
    build(2*i+2,mid+1,high);
    seg[i]=merge(seg[2*i+1],seg[2*i+2]);
}
void update(int pos, int val,int i=0, int low=0, int high=arr.size()-1){
    //we would need base case, and a pruning statement, 
    //pruing statement is koi chutiyaap hojaye 
    //we do it in range (low,high) updating seg[pos]=val;
    if(pos<low || pos>high){
        return;//agar out of range: go out
    }
    if(low==high){
        seg[i].sum=val;
        return;
    }
    int mid=(low+high)/2;
    update(pos,val,2*i+1,low,mid);
    update(pos,val,2*i+2,mid+1,high);
    seg[i]=merge(seg[2*i+1],seg[2*i+2]);
}
node query(int l, int r, int i=0, int low=0, int high=arr.size()-1){
    if(high<l || r<low){
        return node();//no overlap
    }
    if(l<=low && high<=r){
        return seg[i];
    }
    int mid=(low+high)/2;
    node left=query(l,r,2*i+1,low,mid);
    node right=query(l,r,2*i+2,mid+1,high);
    return merge(left,right);
}
signed main(){
    fastio();
    int n,q; cin>>n>>q;
    arr.resize(n); seg.resize(4*n);
    ffor(n) cin>>arr[i];
    build();
    //cout<<endl;
    while(q--){
        int a; cin>>a;
        if(a==1){
            int b,c; cin>>b>>c;
            b--;
            update(b,c);
        }
        else{
            int l,r; cin>>l>>r;
            l--;r--;
            cout<<query(l,r).sum<<endl;
        }
    }
}
